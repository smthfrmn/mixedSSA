update_distributions_by_categorical_var <- function(data, model,
distribution,
variable_names = NULL,
reference_category = "reference_category",
na_remove = TRUE) {
browser()
# TODO: check everything passed in correct
coefs <- glmmTMB::fixef(model)$cond
observed_fitted_distribution <- amt::fit_distr(data, distribution, na.rm = na_remove)
# TODO: add user passed variable names validation
variable_names <- if(is.null(variable_names)) get_default_variable_names(distribution) else variable_names
update_fn_and_args <- get_update_distribution_function_and_args(distribution)
update_fn <- update_fn_and_args$fn
update_fn_arg_names <- update_fn_and_args$args
args_df <- data.frame()
for (i in 1:length(variable_names)) {
args_str <- variable_names[i]
interaction_coefficients <- names(coefs) %>%
str_detect(pattern = str_interp("^${args_str}:")) %>%
keep(coefs, .)
interaction_coefficient_name <- names(interaction_coefficients)
category <- sapply(interaction_coefficient_name, function(name) {
return(str_extract(name, regex("(?<=:).*")))
})
interaction_coefficient_value <- unname(interaction_coefficients)
nrows <- length(interaction_coefficient_value)
coefficient_name <- rep(args_str, nrows)
coefficient_value <- rep(coefs[args_str], nrows)
non_interaction_row <- cbind(interaction_coefficient_name = args_str,
category = reference_category,
interaction_coefficient_value = 0,
coefficient_name = args_str,
coefficient_value = coefs[args_str])
args_df <- rbind(args_df,
cbind(interaction_coefficient_name,
category,
interaction_coefficient_value,
coefficient_name, coefficient_value),
non_interaction_row)
}
pivoted_args_df <- args_df %>%
mutate(
interaction_coefficient_value = as.numeric(interaction_coefficient_value),
coefficient_value = as.numeric(coefficient_value),
coefficient_value_sum = interaction_coefficient_value + coefficient_value
) %>%
pivot_wider(
names_from = coefficient_name,
values_from = coefficient_value_sum
) %>%
group_by(category) %>%
summarize(across(variable_names, mean, na.rm = T))
colnames(pivoted_args_df) <- c("category", update_fn_and_args$args[2:length(update_fn_and_args$args)])
all_updated_parameters <- apply(pivoted_args_df, 1,
get_updated_parameters_,
dist = observed_fitted_distribution,
update_fn = update_fn)
final_df <- cbind(pivoted_args_df, rbindlist(all_updated_parameters))
return(final_df)
}
update_distributions_by_categorical_var(data = ssf1$sl_, model = model, distribution = "gamma")
get_updated_parameters_ <- function(args_df_row, dist, update_fn) {
browser()
args <- c(list(dist = dist), sapply(args_df_row[2:length(args_df_row)], as.numeric))
updated_parameters <- do.call(update_fn, args)$params
return(updated_parameters)
}
# TODO: add more dynamic
update_distributions_by_categorical_var <- function(data, model,
distribution,
variable_names = NULL,
reference_category = "reference_category",
na_remove = TRUE) {
browser()
# TODO: check everything passed in correct
coefs <- glmmTMB::fixef(model)$cond
observed_fitted_distribution <- amt::fit_distr(data, distribution, na.rm = na_remove)
# TODO: add user passed variable names validation
variable_names <- if(is.null(variable_names)) get_default_variable_names(distribution) else variable_names
update_fn_and_args <- get_update_distribution_function_and_args(distribution)
update_fn <- update_fn_and_args$fn
update_fn_arg_names <- update_fn_and_args$args
args_df <- data.frame()
for (i in 1:length(variable_names)) {
args_str <- variable_names[i]
interaction_coefficients <- names(coefs) %>%
str_detect(pattern = str_interp("^${args_str}:")) %>%
keep(coefs, .)
interaction_coefficient_name <- names(interaction_coefficients)
category <- sapply(interaction_coefficient_name, function(name) {
return(str_extract(name, regex("(?<=:).*")))
})
interaction_coefficient_value <- unname(interaction_coefficients)
nrows <- length(interaction_coefficient_value)
coefficient_name <- rep(args_str, nrows)
coefficient_value <- rep(coefs[args_str], nrows)
non_interaction_row <- cbind(interaction_coefficient_name = args_str,
category = reference_category,
interaction_coefficient_value = 0,
coefficient_name = args_str,
coefficient_value = coefs[args_str])
args_df <- rbind(args_df,
cbind(interaction_coefficient_name,
category,
interaction_coefficient_value,
coefficient_name, coefficient_value),
non_interaction_row)
}
pivoted_args_df <- args_df %>%
mutate(
interaction_coefficient_value = as.numeric(interaction_coefficient_value),
coefficient_value = as.numeric(coefficient_value),
coefficient_value_sum = interaction_coefficient_value + coefficient_value
) %>%
pivot_wider(
names_from = coefficient_name,
values_from = coefficient_value_sum
) %>%
group_by(category) %>%
summarize(across(variable_names, mean, na.rm = T))
colnames(pivoted_args_df) <- c("category", update_fn_and_args$args[2:length(update_fn_and_args$args)])
all_updated_parameters <- apply(pivoted_args_df, 1,
get_updated_parameters_,
dist = observed_fitted_distribution,
update_fn = update_fn)
final_df <- cbind(pivoted_args_df, rbindlist(all_updated_parameters))
return(final_df)
}
update_distributions_by_categorical_var(data = ssf1$sl_, model = model, distribution = "gamma")
update_fb
update_fn
args
update_fn
?update_gamma
update_distributions_by_categorical_var(data = ssf1$sl_, model = model, distribution = "exp")
update_distributions_by_categorical_var(data = ssf1$ta_, model = model, distribution = "vonmises")
model <- glmmTMB(case_ ~ sl_ + log_sl_ + cos_ta_ + sl_:animal + log_sl_:animal + cos_ta_:animal, data = ssf1)
update_distributions_by_categorical_var(data = ssf1$ta_, model = model, distribution = "vonmises")
source("~/umn/movementUtilities/R/distributions.R", echo=TRUE)
styler:::style_active_file()
update_distributions_by_categorical_var(data = ssf1$ta_, model = model, distribution = "vonmises")
model <- readRDS(here("Snapper.ssf_sum_6min_all.rds"))
library(here)
model <- readRDS(here("Snapper.ssf_sum_6min_all.rds"))
update_distributions_by_categorical_var(data = ssf1$ta_, model = model, distribution = "vonmises")
update_distributions_by_categorical_var(data = ssf1$ta_, model = model, distribution = "gamma")
glmmTMB::fixef(model)$cond
# TODO: add more dynamic
update_distributions_by_categorical_var <- function(data, model,
distribution,
variable_names = NULL,
reference_category = "reference_category",
na_remove = TRUE) {
browser()
# TODO: check everything passed in correct
coefs <- glmmTMB::fixef(model)$cond
observed_fitted_distribution <- amt::fit_distr(data, distribution, na.rm = na_remove)
# TODO: add user passed variable names validation
variable_names <- if (is.null(variable_names)) get_default_variable_names(distribution) else variable_names
update_fn_and_args <- get_update_distribution_function_and_args(distribution)
update_fn <- update_fn_and_args$fn
update_fn_arg_names <- update_fn_and_args$args
args_df <- data.frame()
for (i in 1:length(variable_names)) {
args_str <- variable_names[i]
interaction_coefficients <- names(coefs) %>%
str_detect(pattern = str_interp("^${args_str}:")) %>%
keep(coefs, .)
interaction_coefficient_name <- names(interaction_coefficients)
category <- sapply(interaction_coefficient_name, function(name) {
return(str_extract(name, regex("(?<=:).*")))
})
interaction_coefficient_value <- unname(interaction_coefficients)
nrows <- length(interaction_coefficient_value)
coefficient_name <- rep(args_str, nrows)
coefficient_value <- rep(coefs[args_str], nrows)
non_interaction_row <- cbind(
interaction_coefficient_name = args_str,
category = reference_category,
interaction_coefficient_value = 0,
coefficient_name = args_str,
coefficient_value = coefs[args_str]
)
args_df <- rbind(
args_df,
cbind(
interaction_coefficient_name,
category,
interaction_coefficient_value,
coefficient_name, coefficient_value
),
non_interaction_row
)
}
pivoted_args_df <- args_df %>%
mutate(
interaction_coefficient_value = as.numeric(interaction_coefficient_value),
coefficient_value = as.numeric(coefficient_value),
coefficient_value_sum = interaction_coefficient_value + coefficient_value
) %>%
pivot_wider(
names_from = coefficient_name,
values_from = coefficient_value_sum
) %>%
group_by(category) %>%
summarize(across(variable_names, mean, na.rm = T))
colnames(pivoted_args_df) <- c("category", update_fn_and_args$args[2:length(update_fn_and_args$args)])
all_updated_parameters <- apply(pivoted_args_df, 1,
get_updated_parameters_,
dist = observed_fitted_distribution,
update_fn = update_fn
)
final_df <- cbind(pivoted_args_df, rbindlist(all_updated_parameters))
return(final_df)
}
update_distributions_by_categorical_var(data = ssf1$ta_, model = model, distribution = "gamma")
coefs
# TODO: check everything passed in correct
data <- model$frame
# TODO: add more dynamic
update_distributions_by_categorical_var <- function(model,
distribution,
variable_names = NULL,
reference_category = "reference_category",
na_remove = TRUE) {
browser()
# TODO: check everything passed in correct
data <- model$frame
coefs <- glmmTMB::fixef(model)$cond
observed_fitted_distribution <- amt::fit_distr(data, distribution, na.rm = na_remove)
# TODO: add user passed variable names validation
variable_names <- if (is.null(variable_names)) get_default_variable_names(distribution) else variable_names
update_fn_and_args <- get_update_distribution_function_and_args(distribution)
update_fn <- update_fn_and_args$fn
update_fn_arg_names <- update_fn_and_args$args
args_df <- data.frame()
for (i in 1:length(variable_names)) {
args_str <- variable_names[i]
interaction_coefficients <- names(coefs) %>%
str_detect(pattern = str_interp("^${args_str}:")) %>%
keep(coefs, .)
interaction_coefficient_name <- names(interaction_coefficients)
category <- sapply(interaction_coefficient_name, function(name) {
return(str_extract(name, regex("(?<=:).*")))
})
interaction_coefficient_value <- unname(interaction_coefficients)
nrows <- length(interaction_coefficient_value)
coefficient_name <- rep(args_str, nrows)
coefficient_value <- rep(coefs[args_str], nrows)
non_interaction_row <- cbind(
interaction_coefficient_name = args_str,
category = reference_category,
interaction_coefficient_value = 0,
coefficient_name = args_str,
coefficient_value = coefs[args_str]
)
args_df <- rbind(
args_df,
cbind(
interaction_coefficient_name,
category,
interaction_coefficient_value,
coefficient_name, coefficient_value
),
non_interaction_row
)
}
pivoted_args_df <- args_df %>%
mutate(
interaction_coefficient_value = as.numeric(interaction_coefficient_value),
coefficient_value = as.numeric(coefficient_value),
coefficient_value_sum = interaction_coefficient_value + coefficient_value
) %>%
pivot_wider(
names_from = coefficient_name,
values_from = coefficient_value_sum
) %>%
group_by(category) %>%
summarize(across(variable_names, mean, na.rm = T))
colnames(pivoted_args_df) <- c("category", update_fn_and_args$args[2:length(update_fn_and_args$args)])
all_updated_parameters <- apply(pivoted_args_df, 1,
get_updated_parameters_,
dist = observed_fitted_distribution,
update_fn = update_fn
)
final_df <- cbind(pivoted_args_df, rbindlist(all_updated_parameters))
return(final_df)
}
update_distributions_by_categorical_var(model = model, distribution = "gamma")
update_distributions_by_categorical_var(model = model, distribution = "gamma")
data
# TODO: add more dynamic
update_distributions_by_categorical_var <- function(model,
distribution,
variable_names = NULL,
reference_category = "reference_category",
na_remove = TRUE) {
browser()
# TODO: check everything passed in correct
data <- model$frame
coefs <- glmmTMB::fixef(model)$cond
observed_fitted_distribution <- amt::fit_distr(data, distribution, na.rm = T)
# TODO: add user passed variable names validation
variable_names <- if (is.null(variable_names)) get_default_variable_names(distribution) else variable_names
update_fn_and_args <- get_update_distribution_function_and_args(distribution)
update_fn <- update_fn_and_args$fn
update_fn_arg_names <- update_fn_and_args$args
args_df <- data.frame()
for (i in 1:length(variable_names)) {
args_str <- variable_names[i]
interaction_coefficients <- names(coefs) %>%
str_detect(pattern = str_interp("^${args_str}:")) %>%
keep(coefs, .)
interaction_coefficient_name <- names(interaction_coefficients)
category <- sapply(interaction_coefficient_name, function(name) {
return(str_extract(name, regex("(?<=:).*")))
})
interaction_coefficient_value <- unname(interaction_coefficients)
nrows <- length(interaction_coefficient_value)
coefficient_name <- rep(args_str, nrows)
coefficient_value <- rep(coefs[args_str], nrows)
non_interaction_row <- cbind(
interaction_coefficient_name = args_str,
category = reference_category,
interaction_coefficient_value = 0,
coefficient_name = args_str,
coefficient_value = coefs[args_str]
)
args_df <- rbind(
args_df,
cbind(
interaction_coefficient_name,
category,
interaction_coefficient_value,
coefficient_name, coefficient_value
),
non_interaction_row
)
}
pivoted_args_df <- args_df %>%
mutate(
interaction_coefficient_value = as.numeric(interaction_coefficient_value),
coefficient_value = as.numeric(coefficient_value),
coefficient_value_sum = interaction_coefficient_value + coefficient_value
) %>%
pivot_wider(
names_from = coefficient_name,
values_from = coefficient_value_sum
) %>%
group_by(category) %>%
summarize(across(variable_names, mean, na.rm = T))
colnames(pivoted_args_df) <- c("category", update_fn_and_args$args[2:length(update_fn_and_args$args)])
all_updated_parameters <- apply(pivoted_args_df, 1,
get_updated_parameters_,
dist = observed_fitted_distribution,
update_fn = update_fn
)
final_df <- cbind(pivoted_args_df, rbindlist(all_updated_parameters))
return(final_df)
}
# TODO: check everything passed in correct
data <- model$frame
data
min(data$sl_)
min(data$log_sl_)
coefs <- glmmTMB::fixef(model)$cond
observed_fitted_distribution <- amt::fit_distr(data, distribution, na.rm = T)
# TODO: add more dynamic
update_distributions_by_categorical_var <- function(model,
distribution,
variable_names = NULL,
reference_category = "reference_category",
na_remove = TRUE) {
browser()
# TODO: check everything passed in correct
data <- model$frame
coefs <- glmmTMB::fixef(model)$cond
observed_fitted_distribution <- amt::fit_distr(data, distribution, na.rm = T)
# TODO: add user passed variable names validation
variable_names <- if (is.null(variable_names)) get_default_variable_names(distribution) else variable_names
update_fn_and_args <- get_update_distribution_function_and_args(distribution)
update_fn <- update_fn_and_args$fn
update_fn_arg_names <- update_fn_and_args$args
args_df <- data.frame()
for (i in 1:length(variable_names)) {
args_str <- variable_names[i]
interaction_coefficients <- names(coefs) %>%
str_detect(pattern = str_interp("^${args_str}:")) %>%
keep(coefs, .)
interaction_coefficient_name <- names(interaction_coefficients)
category <- sapply(interaction_coefficient_name, function(name) {
return(str_extract(name, regex("(?<=:).*")))
})
interaction_coefficient_value <- unname(interaction_coefficients)
nrows <- length(interaction_coefficient_value)
coefficient_name <- rep(args_str, nrows)
coefficient_value <- rep(coefs[args_str], nrows)
non_interaction_row <- cbind(
interaction_coefficient_name = args_str,
category = reference_category,
interaction_coefficient_value = 0,
coefficient_name = args_str,
coefficient_value = coefs[args_str]
)
args_df <- rbind(
args_df,
cbind(
interaction_coefficient_name,
category,
interaction_coefficient_value,
coefficient_name, coefficient_value
),
non_interaction_row
)
}
pivoted_args_df <- args_df %>%
mutate(
interaction_coefficient_value = as.numeric(interaction_coefficient_value),
coefficient_value = as.numeric(coefficient_value),
coefficient_value_sum = interaction_coefficient_value + coefficient_value
) %>%
pivot_wider(
names_from = coefficient_name,
values_from = coefficient_value_sum
) %>%
group_by(category) %>%
summarize(across(variable_names, mean, na.rm = T))
colnames(pivoted_args_df) <- c("category", update_fn_and_args$args[2:length(update_fn_and_args$args)])
all_updated_parameters <- apply(pivoted_args_df, 1,
get_updated_parameters_,
dist = observed_fitted_distribution,
update_fn = update_fn
)
final_df <- cbind(pivoted_args_df, rbindlist(all_updated_parameters))
return(final_df)
}
observed_fitted_distribution <- amt::fit_distr(data, distribution, na.rm = T)
update_distributions_by_categorical_var(model = model, distribution = "gamma")
data
update_distributions_by_categorical_var(model = model, distribution = "gamma")
sl_min
update_distributions_by_categorical_var(data =  model$frame$sl_, model = model, distribution = "gamma")
# TODO: add more dynamic
update_distributions_by_categorical_var <- function(data, model,
distribution,
variable_names = NULL,
reference_category = "reference_category",
na_remove = TRUE) {
browser()
# TODO: check everything passed in correct
coefs <- glmmTMB::fixef(model)$cond
observed_fitted_distribution <- amt::fit_distr(data, distribution, na.rm = T)
# TODO: add user passed variable names validation
variable_names <- if (is.null(variable_names)) get_default_variable_names(distribution) else variable_names
update_fn_and_args <- get_update_distribution_function_and_args(distribution)
update_fn <- update_fn_and_args$fn
update_fn_arg_names <- update_fn_and_args$args
args_df <- data.frame()
for (i in 1:length(variable_names)) {
args_str <- variable_names[i]
interaction_coefficients <- names(coefs) %>%
str_detect(pattern = str_interp("^${args_str}:")) %>%
keep(coefs, .)
interaction_coefficient_name <- names(interaction_coefficients)
category <- sapply(interaction_coefficient_name, function(name) {
return(str_extract(name, regex("(?<=:).*")))
})
interaction_coefficient_value <- unname(interaction_coefficients)
nrows <- length(interaction_coefficient_value)
coefficient_name <- rep(args_str, nrows)
coefficient_value <- rep(coefs[args_str], nrows)
non_interaction_row <- cbind(
interaction_coefficient_name = args_str,
category = reference_category,
interaction_coefficient_value = 0,
coefficient_name = args_str,
coefficient_value = coefs[args_str]
)
args_df <- rbind(
args_df,
cbind(
interaction_coefficient_name,
category,
interaction_coefficient_value,
coefficient_name, coefficient_value
),
non_interaction_row
)
}
pivoted_args_df <- args_df %>%
mutate(
interaction_coefficient_value = as.numeric(interaction_coefficient_value),
coefficient_value = as.numeric(coefficient_value),
coefficient_value_sum = interaction_coefficient_value + coefficient_value
) %>%
pivot_wider(
names_from = coefficient_name,
values_from = coefficient_value_sum
) %>%
group_by(category) %>%
summarize(across(variable_names, mean, na.rm = T))
colnames(pivoted_args_df) <- c("category", update_fn_and_args$args[2:length(update_fn_and_args$args)])
all_updated_parameters <- apply(pivoted_args_df, 1,
get_updated_parameters_,
dist = observed_fitted_distribution,
update_fn = update_fn
)
final_df <- cbind(pivoted_args_df, rbindlist(all_updated_parameters))
return(final_df)
}
update_distributions_by_categorical_var(data =  model$frame$sl_, model = model, distribution = "gamma")
styler:::style_active_file()
